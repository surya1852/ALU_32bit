module emotrail(
           
           input [31:0] A,B,  // ALU 8-bit Inputs                 
           input [4:0] ALU_Sel,// ALU Selection
           output [31:0] ALU_Out, // ALU 8-bit Output
           output CarryOut // Carry Out Flag
    );
    reg [31:0] ALU_Result;
    wire [32:0] tmp;
    assign ALU_Out = ALU_Result; // ALU out
    assign tmp = {1'b0,A} + {1'b0,B};
    assign CarryOut = tmp[32]; // Carryout flag
    always @(*)
    begin
        case(ALU_Sel)
          5'b00000: // Addition
           ALU_Result = A + B ; 
          5'b00001: // Subtraction
           ALU_Result = A - B ;
          5'b00010: // Multiplication
           ALU_Result = A * B;
          5'b00011: // Division
           ALU_Result = A/B;
          5'b00100: // Logical shift left
           ALU_Result = A<<1;
          5'b00101: // Logical shift right
           ALU_Result = A>>1;
          5'b00110: // Rotate left
           ALU_Result = {A[30:0],A[31]};
          5'b00111: // Rotate right
           ALU_Result = {A[0],A[31:1]};
          5'b01000: //  Logical and 
           ALU_Result = A & B;
          5'b01001: //  Logical or
           ALU_Result = A | B;
          5'b01010: //  Logical xor 
           ALU_Result = A ^ B;
          5'b01011: //  Logical nor
           ALU_Result = ~(A | B);
          5'b01100: // Logical nand 
           ALU_Result = ~(A & B);
          5'b01101: // Logical xnor
           ALU_Result = ~(A ^ B);
          5'b01110: // Greater comparison
           ALU_Result = (A>B)?32'd1:32'd0 ;
          5'b01111: // Equal comparison   
            ALU_Result = (A==B)?32'd1:32'd0 ;
			 5'b10000://Increment
				ALU_Result = A+1;
			 5'b10001://Decrement
				ALU_Result = A-1;
			 5'b10010://Logical not
				ALU_Result= ~ A;
			 5'b10011://Rem
			   ALU_Result = A%B;
			 5'B10100://Lesser comparision
			   ALU_Result = (A<B)?32'd1:32'd0 ;
          default: ALU_Result = A + B ; 
        endcase
    end

endmodule
